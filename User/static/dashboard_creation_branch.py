# urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('', views.home, name='home'),
    path('motorist_signup/', views.motorist_signup, name='motorist_signup'),
    path('motorist_login/', views.motorist_login, name='motorist_login'),
    path('official_signup/', views.official_signup, name='official_signup'),
    path('official_login/', views.official_login, name='official_login'),
    path('admin_login/', views.admin_login_redirect, name='admin_login_redirect'),
    path('motorist/dashboard/', views.dashboard_motorist, name='dashboard_motorist'),
    # Add other URL patterns here
]

#-------------------------------------------------------------------------------------------------------------------

# models.py

from django.contrib.auth.models import AbstractUser, BaseUserManager, PermissionsMixin
from django.db import models
from django.utils import timezone 

class UserManager(BaseUserManager):
    def create_user(self, email, password=None, license_no=None, role='motorist', **extra_fields):
        if not email:
            raise ValueError('The Email field must be set')
        
        # License number is required for motorists only
        if role == 'motorist' and not license_no:
            raise ValueError('Motorists must have a License Number')

        user = self.model(email=self.normalize_email(email), license_no=license_no, role=role, **extra_fields)

        # Handle password for officials (motorists don't use passwords)
        if password:
            user.set_password(password)
        else:
            user.set_unusable_password()

        user.save(using=self._db)
        return user


class User(AbstractUser):
    USER_ROLES = (
        ('motorist', 'Motorist'),
        ('official', 'Official'),
    )
    
    username = models.CharField(max_length=100, unique=True, null=True)
    first_name = models.CharField(max_length=100)
    other_name = models.CharField(max_length=100, blank=True, null=True)  # Optional middle/other name
    last_name = models.CharField(max_length=100)
    email = models.EmailField(unique=True)
    role = models.CharField(max_length=10, choices=USER_ROLES)
    license_no = models.CharField(max_length=20, unique=True, blank=True, null=True)  # Optional for Admins and Officials
    date_created = models.DateTimeField(auto_now_add=True)
    last_login = models.DateTimeField(null=True, blank=True)

    USERNAME_FIELD = 'username'
    REQUIRED_FIELDS = []  

    objects = UserManager()

    def __str__(self):
        return f"{self.first_name} {self.last_name} ({self.email} {self.license_no})"

    def is_motorist(self):
        return self.role == 'motorist'

    def is_official(self):
        return self.role == 'official'
    
# ---------------------------------------------------------------------------------------------------------------------------------

# backends.py 

from typing import Any
from django.contrib.auth.backends import BaseBackend, ModelBackend
from django.contrib.auth.base_user import AbstractBaseUser
from django.http.request import HttpRequest
from .models import User

class EmailLicenseNoBackend(BaseBackend):
    def authenticate(self, request, email=None, license_no=None):
        try:
            user = User.objects.get(email=email, license_no=license_no, role='motorist')
            return user
        except User.DoesNotExist:
            return None

    def get_user(self, user_id):
        try:
            return User.objects.get(pk=user_id)
        except User.DoesNotExist:
            return None
        

class OfficialEmailBackend(ModelBackend):
    def authenticate(self, request, username=None, password=None, **kwargs):
        try:
            user = User.objects.get(email=username, role='official')
            if user.check_password(password):
                return user
        except User.DoesNotExist:
            return None
        

# ---------------------------------------------------------------------------------------------------------------------

# settings.py

"""
Django settings for ticket_mgt project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@r1!(ryr07n3jl+63m7+g-x9iu%3ek2g!)c$!6=wc=y3$ly57%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'User',
    'Vehicle',
    'Offense',
    'Ticket',
    'Payment',
    'Proof',
]

AUTH_USER_MODEL = 'User.User'  # Specifying custom user model

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ticket_mgt.urls'

import os

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'User', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ticket_mgt.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'ticketmgt',
	'USER': 'ticketmgtuser',
	'PASSWORD': 'password',
	'HOST': 'localhost',
	'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = [
    'User.backends.EmailLicenseNoBackend',  # Motorists (email + license_no)
    'User.backends.OfficialEmailBackend',  # Officials (email + password)
    'django.contrib.auth.backends.ModelBackend',  # Default for Admins (email + password)
]


# -----------------------------------------------------------------------------------------------------------------

# motorist_login.html

{% load static %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Motorist Login</title>
    <link rel="stylesheet" href="{% static 'motorist_login.css' %}">
</head>
<body>
    <nav class="navbar">
        <a href="{% url 'home' %}"><img src="{% static 'logo.png' %}" alt="Logo"></a>
        <h1>MOTORIST LOGIN</h1>
        <a href="{% url 'motorist_signup' %}" class="signup-link">Sign Up</a>
    </nav>
    
    <div class="container">
        <form method="POST">
            {% csrf_token %}
            <input type="email" name="email" placeholder="Email" required>
            <input type="text" name="license_no" placeholder="License Number" required>
            <button type="submit" class="btn">Login</button>
        </form>
        <p>For new motorists, <a href="{% url 'motorist_signup' %}" class="signup-text">Sign Up</a></p>
    </div>
</body>
</html>


# ------------------------------------------------------------------------------------------------------------------

# views.py 

from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.decorators import login_required
from django.urls import reverse
from .forms import MotoristSignUpForm, MotoristLoginForm, OfficialSignUpForm, OfficialLoginForm
from .models import User
from Ticket.models import Ticket


def home(request):
    return render(request, 'home.html')

# Motorist views
def motorist_signup(request):
    if request.method == 'POST':
        form = MotoristSignUpForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('motorist_login')
    else:
        form = MotoristSignUpForm()
    return render(request, 'motorist_signup.html', {'form': form})

def motorist_login(request):
    if request.method == 'POST':
        form = MotoristLoginForm(request.POST)
        if form.is_valid():
            email = form.cleaned_data['email']
            license_no = form.cleaned_data['license_no']

            # Use the custom backend to authenticate the user
            user = authenticate(request, email=email, license_no=license_no)

            if user is not None:
                login(request, user)  # Log the user in
                return redirect('dashboard_motorist')  # Redirect to the motorist dashboard
            else:
                form.add_error(None, 'Invalid email or license number')
    else:
        form = MotoristLoginForm()

    return render(request, 'motorist_login.html', {'form': form})



# Official views
def official_signup(request):
    if request.method == 'POST':
        form = OfficialSignUpForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('official_login')
    else:
        form = OfficialSignUpForm()
    return render(request, 'official_signup.html', {'form': form})

def official_login(request):
    if request.method == 'POST':
        form = OfficialLoginForm(request.POST)
        if form.is_valid():
            email = form.cleaned_data['email']
            password = form.cleaned_data['password']
            user = authenticate(request, email=email, password=password)
            if user and user.role == 'official':
                login(request, user)
                return redirect('dashboard_official')  # Redirect to the official dashboard
            else:
                form.add_error(None, 'Invalid email or password')
    else:
        form = OfficialLoginForm()
    return render(request, 'official_login.html', {'form': form})

# Admin views
def admin_login_redirect(request):
    return redirect(reverse('admin:login'))

@login_required
def dashboard_motorist(request):
    user = request.user
    if user.role != 'motorist':  # Ensure only motorists can access this page
        return redirect('motorist_login')
    
    tickets = Ticket.objects.filter(motorist=user)  # Assuming you have a Ticket model
    total_points = tickets.aggregate(Sum('points'))['points__sum'] or 0  # Sum of offense points

    context = {
        'first_name': user.first_name,
        'last_name': user.last_name,
        'license_no': user.license_no,
        'points': total_points,
        'tickets': tickets
    }
    return render(request, 'dashboard_motorist.html', context)

# ------------------------------------------------------------------------------------------------------------------------

# dashboard_motorist.html

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Motorist Dashboard</title>
    <link rel="stylesheet" href="{% static 'dashboard_motorist.css' %}">
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar">
        <a href="{% url 'motorist_dashboard' %}">
            <img src="{% static 'logo.png' %}" alt="Logo">
        </a>
        <div class="nav-links">
            <a href="{% url 'motorist_profile' %}">Profile</a>
            <a href="https://road-authority-site.com/offense-list">Offense List</a>
            <a href="{% url 'logout' %}">Logout</a>
        </div>
    </nav>

    <!-- Main Section -->
    <div class="main-content">
        <h2>Welcome, {{ motorist.first_name }} {{ motorist.last_name }}</h2>
        <div class="motorist-info">
            <div>
                <p>License Number</p>
                <h3>{{ motorist.license_no }}</h3>
            </div>
            <div>
                <p>Points</p>
                <h3>{{ motorist.points }}</h3>
            </div>
        </div>

        <!-- Ticket Table -->
        <h3>Tickets</h3>
        <table>
            <thead>
                <tr>
                    <th>Ticket No.</th>
                    <th>Plate No.</th>
                    <th>Offense Code</th>
                    <th>Penalty</th>
                    <th>Date</th>
                    <th>Deadline</th>
                    <th>Pay</th>
                </tr>
            </thead>
            <tbody>
                {% if tickets %}
                    {% for ticket in tickets %}
                    <tr>
                        <td><a href="{% url 'ticket_details' ticket.id %}">{{ ticket.ticket_no }}</a></td>
                        <td>{{ ticket.plate_no }}</td>
                        <td><a href="https://road-authority-site.com/offense/{{ ticket.offense_code }}">{{ ticket.offense_code }}</a></td>
                        <td>{{ ticket.penalty }}</td>
                        <td>{{ ticket.date }}</td>
                        <td>{{ ticket.deadline }}</td>
                        <td><a href="{% url 'pay_ticket' ticket.id %}" class="btn">Pay</a></td>
                    </tr>
                    {% endfor %}
                {% else %}
                    <tr>
                        <td colspan="7">No tickets</td>
                    </tr>
                {% endif %}
            </tbody>
        </table>

        <p>Click Ticket No to see full details</p>
        
        <!-- Additional Buttons -->
        <div class="buttons">
            <a href="{% url 'ticket_history' %}" class="btn">Ticket History</a>
            <a href="{% url 'dispute_ticket' %}" class="btn">Dispute Ticket</a>
        </div>
    </div>
</body>
</html>

# -------------------------------------------------------------------------------------------------------

# dashboard_motorist.css

/* Base styles */
body {
    font-family: Arial, sans-serif;
    background-color: white;
    margin: 0;
    padding: 0;
}

.navbar {
    background-color: #007bff;
    padding: 15px;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.navbar img {
    height: 50px;
}

.nav-links a {
    color: white;
    text-decoration: none;
    margin-left: 20px;
    font-size: 16px;
}

.nav-links a:hover {
    text-decoration: underline;
}

.main-content {
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
}

h2, h3 {
    color: #007bff;
}

.motorist-info {
    display: flex;
    justify-content: space-between;
    margin: 20px 0;
}

.motorist-info div {
    text-align: center;
}

.motorist-info p {
    font-size: 16px;
    color: #555;
}

.motorist-info h3 {
    font-size: 24px;
    color: #333;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

table, th, td {
    border: 1px solid #ddd;
}

th, td {
    padding: 10px;
    text-align: center;
}

th {
    background-color: #007bff;
    color: white;
}

tbody tr:hover {
    background-color: #f1f1f1;
}

.btn {
    background-color: #007bff;
    color: white;
    padding: 10px 20px;
    text-align: center;
    border-radius: 5px;
    text-decoration: none;
    display: inline-block;
}

.btn:hover {
    background-color: #0056b3;
}

.buttons {
    display: flex;
    gap: 20px;
    margin-bottom: 20px;
}

.buttons .btn {
    margin: 0;
}

table tbody {
    display: block;
    max-height: 200px; /* Makes the table scrollable if more than 5 rows */
    overflow-y: auto;
}

table thead, table tbody tr {
    display: table;
    width: 100%;
    table-layout: fixed;
}
